pipeline {
    agent any

    environment {
        // Set the environment to 'prod' (this can be overridden dynamically if needed)
        ENVIRONMENT = 'prod'
    }

    stages {
        stage('Preparation') {
            steps {
                script {
                    echo "Preparing for the ${ENVIRONMENT} environment"
                    // Perform setup tasks such as loading environment configurations
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prod Build') {
            when {
                expression { return ENVIRONMENT == 'prod' }
            }
            steps {
                script {
                    echo "Building for the PROD environment"
                    // Call a Groovy script to handle the build for prod
                    def groovyScript = load 'prodBuild.groovy'
                    groovyScript.build()  // Call the method to build for prod
                }
            }
        }

        stage('Prod Test') {
            when {
                expression { return ENVIRONMENT == 'prod' }
            }
            steps {
                script {
                    echo "Running tests in the PROD environment"
                    // Call a Groovy script to handle test execution in prod
                    def groovyScript = load 'prodTest.groovy'
                    groovyScript.runTests()  // Call the method to run tests in prod
                }
            }
        }

        stage('Deploy to Prod') {
            when {
                expression { return ENVIRONMENT == 'prod' }
            }
            steps {
                script {
                    echo "Deploying to the PROD environment"
                    // Call a Groovy script to handle deployment to prod
                    def groovyScript = load 'prodDeploy.groovy'
                    groovyScript.deploy()  // Call the method to deploy to prod
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up after the build"
            // Perform any cleanup tasks here, such as archiving artifacts or cleaning up workspace
        }
        success {
            echo "Build completed successfully for the ${ENVIRONMENT} environment"
        }
        failure {
            echo "Build failed for the ${ENVIRONMENT} environment"
        }
    }
}
